// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/11/2018 23:57:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Adventure_Game
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Adventure_Game_vlg_vec_tst();
// constants                                           
// general purpose registers
reg E;
reg N;
reg S;
reg W;
reg clk;
// wires                                               
wire DIE;
wire WIN;
wire [2:0] current;
wire [2:0] next;

// assign statements (if any)                          
Adventure_Game i1 (
// port map - connection between master ports and signals/registers   
	.DIE(DIE),
	.E(E),
	.N(N),
	.S(S),
	.W(W),
	.WIN(WIN),
	.clk(clk),
	.current(current),
	.next(next)
);
initial 
begin 
#45000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// E
initial
begin
	E = 1'b1;
	E = #5000 1'b0;
	E = #15000 1'b1;
	E = #15000 1'b0;
end 

// N
initial
begin
	N = 1'b0;
end 

// S
initial
begin
	S = 1'b0;
	S = #5000 1'b1;
	S = #10000 1'b0;
end 

// W
initial
begin
	W = 1'b0;
	W = #15000 1'b1;
	W = #5000 1'b0;
end 
endmodule

